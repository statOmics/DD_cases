"0","DD_res <- pblapply(pb_bin_ct, function(element){"
"0","  "
"0","    # get cell type name"
"0","    ct <- levels(droplevels(element$cell_type_curated))"
"0","  "
"0","    # create design matrix"
"0","    design <- model.matrix(~ Site + sex + Status_on_day_collection_summary, "
"0","                           colData(element))"
"0","    colnames(design) <- sub(""Status_on_day_collection_summary"", """", colnames(design))"
"0","    colnames(design)[1] <- ""Intercept"""
"0","    "
"0","    # Remove features detected in (nearly) all cells"
"0","    med_detection <- rowMedians(sweep(assay(element), 2, element$ncells, ""/""))"
"0","    hist(med_detection, breaks=40)"
"0","    abline(v=0.9, col=""red"", lwd=2, cex.main=0.7)"
"0","    "
"0","    # Differential detection analysis with edgeR-NB_optim"
"0","    y <- DGEList(counts=assay(element)[med_detection < 0.9,], samples=colData(element))"
"0","    of <- colMeans(sweep(assay(element)[med_detection < 0.9,], 2, element$ncells, ""/""))"
"0","    y$offset <- log(element$ncells*of)"
"0","    y <- estimateDisp(y, design)"
"0","    fit <- glmQLFit(y, design, robust=T)"
"0","  "
"0","    # Intermediate visualization"
"0","    par(mfrow=c(1,2))"
"0","    plotBCV(y, main = paste0(""QLDisp plot for "", ct), cex.main=0.7)"
"0","    plotQLDisp(fit, main = paste0(""QLDisp plot for "", ct), cex.main=0.7)"
"0","    abline(h=1, col=""gold4"", lwd=2)"
"0","    "
"0","    # Differential testing"
"0","    resList_i <- vector(mode = ""list"", length = ncol(L))"
"0","    for(j in 1:ncol(L)){"
"0","      test <- glmQLFTest(fit, contrast=L[,j], poisson.bound = FALSE)"
"0","      resList_i[[j]] <- test$table"
"0","    }"
"0","    return(resList_i)"
"0","})"
"1",""
"1"," "
"1"," |                                                  |"
"1"," "
"1","0 % ~calculating  "
